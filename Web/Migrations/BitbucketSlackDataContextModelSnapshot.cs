// <auto-generated />
using BitbucketSlackBot.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BitbucketSlackBot.Migrations
{
    [DbContext(typeof(BitbucketSlackDataContext))]
    partial class BitbucketSlackDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BitbucketSlackBot.Data.BitbucketRepository", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommonAccess")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Repository")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SlackWorkspaceOwnerID")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Workspace")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("SlackWorkspaceOwnerID");

                    b.ToTable("BitbucketRepository");
                });

            modelBuilder.Entity("BitbucketSlackBot.Data.SlackUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUuid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("SlackUser");
                });

            modelBuilder.Entity("BitbucketSlackBot.Data.SlackUserRepositoryAccess", b =>
                {
                    b.Property<int>("SlackUserID")
                        .HasColumnType("int");

                    b.Property<int>("BitbucketRepositoryID")
                        .HasColumnType("int");

                    b.Property<int>("RepositoryAccess")
                        .HasColumnType("int");

                    b.HasKey("SlackUserID", "BitbucketRepositoryID");

                    b.HasIndex("BitbucketRepositoryID");

                    b.ToTable("SlackUserRepositoryAccess");
                });

            modelBuilder.Entity("BitbucketSlackBot.Data.SlackUserWorkspaceSettings", b =>
                {
                    b.Property<int>("SlackUserID")
                        .HasColumnType("int");

                    b.Property<int>("SlackWorkspaceID")
                        .HasColumnType("int");

                    b.HasKey("SlackUserID", "SlackWorkspaceID");

                    b.HasIndex("SlackWorkspaceID");

                    b.ToTable("SlackUserWorkspaceSettings");
                });

            modelBuilder.Entity("BitbucketSlackBot.Data.SlackWorkspace", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("WorkspaceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkspaceUuid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("SlackWorkspace");
                });

            modelBuilder.Entity("BitbucketSlackBot.Data.Subscriber", b =>
                {
                    b.Property<int>("SlackUserID")
                        .HasColumnType("int");

                    b.Property<int>("BitbucketRepositoryID")
                        .HasColumnType("int");

                    b.Property<bool>("OnRepositoryCreated")
                        .HasColumnType("bit");

                    b.HasKey("SlackUserID", "BitbucketRepositoryID");

                    b.HasIndex("BitbucketRepositoryID");

                    b.ToTable("Subscriber");
                });

            modelBuilder.Entity("BitbucketSlackBot.Data.BitbucketRepository", b =>
                {
                    b.HasOne("BitbucketSlackBot.Data.SlackWorkspace", "SlackWorkspaceOwner")
                        .WithMany("Repositories")
                        .HasForeignKey("SlackWorkspaceOwnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BitbucketSlackBot.Data.SlackUserRepositoryAccess", b =>
                {
                    b.HasOne("BitbucketSlackBot.Data.BitbucketRepository", "Repository")
                        .WithMany("RepositoryAccesses")
                        .HasForeignKey("BitbucketRepositoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BitbucketSlackBot.Data.SlackUser", "SlackUser")
                        .WithMany("RepositoryAccesses")
                        .HasForeignKey("SlackUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BitbucketSlackBot.Data.SlackUserWorkspaceSettings", b =>
                {
                    b.HasOne("BitbucketSlackBot.Data.SlackUser", "User")
                        .WithMany("Workspaces")
                        .HasForeignKey("SlackUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BitbucketSlackBot.Data.SlackWorkspace", "Workspace")
                        .WithMany("Users")
                        .HasForeignKey("SlackWorkspaceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BitbucketSlackBot.Data.Subscriber", b =>
                {
                    b.HasOne("BitbucketSlackBot.Data.BitbucketRepository", "Repository")
                        .WithMany("AllSubscribers")
                        .HasForeignKey("BitbucketRepositoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BitbucketSlackBot.Data.SlackUser", "SlackUser")
                        .WithMany("AllSubscriptions")
                        .HasForeignKey("SlackUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
