// <auto-generated />
using System;
using BitbucketSlackBot.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BitbucketSlackBot.Migrations
{
    [DbContext(typeof(BitbucketSlackDataContext))]
    partial class BitbucketSlackDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BitbucketSlackBot.Data.BitbucketRepository", b =>
                {
                    b.Property<Guid>("BitbucketRepositoryUUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SlackTeamID")
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("CommonAccess")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Repository")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Workspace")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BitbucketRepositoryUUID", "SlackTeamID");

                    b.HasIndex("SlackTeamID");

                    b.ToTable("BitbucketRepository");
                });

            modelBuilder.Entity("BitbucketSlackBot.Data.SlackTeam", b =>
                {
                    b.Property<string>("SlackTeamID")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("SlackTeamID");

                    b.ToTable("SlackTeam");
                });

            modelBuilder.Entity("BitbucketSlackBot.Data.SlackUser", b =>
                {
                    b.Property<string>("SlackUserID")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("SlackTeamID")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SlackUserID", "SlackTeamID");

                    b.HasIndex("SlackTeamID");

                    b.ToTable("SlackUser");
                });

            modelBuilder.Entity("BitbucketSlackBot.Data.SlackUserRepositoryAccess", b =>
                {
                    b.Property<string>("SlackUserID")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("SlackTeamID")
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("BitbucketRepositoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BitbucketSlackTeamID")
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("RepositoryAccess")
                        .HasColumnType("int");

                    b.HasKey("SlackUserID", "SlackTeamID", "BitbucketRepositoryID");

                    b.HasIndex("BitbucketRepositoryID", "BitbucketSlackTeamID");

                    b.ToTable("SlackUserRepositoryAccess");

                    b.HasCheckConstraint("CH_TeamID_Must_Be_Equals", "[BitbucketSlackTeamID] = [SlackTeamID]");
                });

            modelBuilder.Entity("BitbucketSlackBot.Data.Subscriber", b =>
                {
                    b.Property<string>("SlackUserID")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("SlackTeamID")
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("BitbucketRepositoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BitbucketSlackTeamID")
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("OnRepositoryCreated")
                        .HasColumnType("bit");

                    b.HasKey("SlackUserID", "SlackTeamID", "BitbucketRepositoryID");

                    b.HasIndex("BitbucketRepositoryID", "BitbucketSlackTeamID");

                    b.ToTable("Subscriber");

                    b.HasCheckConstraint("CH_TeamID_Must_Be_Equals", "[BitbucketSlackTeamID] = [SlackTeamID]");
                });

            modelBuilder.Entity("BitbucketSlackBot.Data.BitbucketRepository", b =>
                {
                    b.HasOne("BitbucketSlackBot.Data.SlackTeam", "SlackTeam")
                        .WithMany("Repositories")
                        .HasForeignKey("SlackTeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BitbucketSlackBot.Data.SlackUser", b =>
                {
                    b.HasOne("BitbucketSlackBot.Data.SlackTeam", "SlackTeam")
                        .WithMany("Users")
                        .HasForeignKey("SlackTeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BitbucketSlackBot.Data.SlackUserRepositoryAccess", b =>
                {
                    b.HasOne("BitbucketSlackBot.Data.BitbucketRepository", "BitbucketRepository")
                        .WithMany("RepositoryAccesses")
                        .HasForeignKey("BitbucketRepositoryID", "BitbucketSlackTeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BitbucketSlackBot.Data.SlackUser", "SlackUser")
                        .WithMany("RepositoryAccesses")
                        .HasForeignKey("SlackUserID", "SlackTeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BitbucketSlackBot.Data.Subscriber", b =>
                {
                    b.HasOne("BitbucketSlackBot.Data.BitbucketRepository", "BitbucketRepository")
                        .WithMany("Subscribers")
                        .HasForeignKey("BitbucketRepositoryID", "BitbucketSlackTeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BitbucketSlackBot.Data.SlackUser", "SlackUser")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SlackUserID", "SlackTeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
